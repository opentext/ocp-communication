/*
 * Copyright 2023 Open Text Corporation, All Rights Reserved.
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.opentext.exstream.sdk.exstreamApi.model.dto;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * OrchestrationResponseData object from the Exstream Orchestration API.<br>
 * OrchestrationResponseData is the top level data object representing the data for each output generated by the
 * Exstream on-demand Engine by a call to an Exstream Orchestration job.
 * @see EngineOutputContext
 */
public class OrchestrationResponseData {
	private static final Logger logger = LoggerFactory.getLogger(OrchestrationResponseData.class);
	private String content;
	private String mimeType;
	private EngineOutputContext engineOutputContext;

    public String getMimeType() { return this.mimeType; }

	public void setMimeType(String mimeType) {
		this.mimeType = mimeType;
	}

	public void setEngineOutputContext(EngineOutputContext engineOutputContext) {
		this.engineOutputContext = engineOutputContext;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

    /**
     * Get the file name from the engine output context
     * @return The file name for the output file
     */
	public String getFileName() {
		if (this.engineOutputContext != null) {
			return this.engineOutputContext.fileName;
		}
		return "";
	}

    /**
     * Get the file extension for output returned from Exstream Orchestration based on the mime type.
     * @return The three letter file extension without the leading dot
     */
    public String getFileExtension() {
        // NOTE: This is not an exhaustive list of all supported Exstream output types
        switch(this.mimeType) {
            case "application/pdf": // PDF
                return "pdf";
            case "application/vnd.exstream-empower": // EMPOWER
                return "mpw";
            default:
                logger.warn("There is no file extension associated with {}. Add it to the getFileExtension switch statement in com.opentext.exstream.sdk.exstreamApi.model.dto.OrchestrationResponseData", this.mimeType);
                return "";
        }
    }

    @Override
    public String toString() {
        return String.join("\n",
                "fileName: " +  this.getFileName(),
                "mimeType: " +  this.mimeType,
                "content: <base64 string length: " + this.content.length() + ">"
        );
    }
}
